<?xml version="1.0"?>
<ruleset name="PHP_CodeSniffer">
    <description>The CSVelte Coding Standard.</description>
    <exclude-pattern>*/tests/*</exclude-pattern>

    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2"/>

    <!--&lt;!&ndash; Arrays MUST be defined using short array syntax (brace syntax). &ndash;&gt;-->
    <!--<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>-->

    <!--&lt;!&ndash; If statements MUST NOT contain unconditional statements (such as true/false) &ndash;&gt;-->
    <!--<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>-->

    <!--&lt;!&ndash; Overridden class methods MUST NOT contain only a call to their parent method &ndash;&gt;-->
    <!--<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>-->

    <!--&lt;!&ndash; Basic DocBlock formatting &ndash;&gt;-->
    <!--<rule ref="Generic.Commenting.DocCommentSniff"/>-->

    <!--&lt;!&ndash; Nags about comments with TODOs &ndash;&gt;-->
    <!--<rule ref="Generic.Commenting.Todo"/>-->

    <!--&lt;!&ndash; Control structures MUST NOT fall completely on one line &ndash;&gt;-->
    <!--<rule ref="Generic.ControlStructures.InlineControlStructure"/>-->

    <!--&lt;!&ndash; Detects BOMs that could corrupt files &ndash;&gt;-->
    <!--<rule ref="Generic.Files.ByteOrderMark"/>-->

    <!--&lt;!&ndash; EVERY statement MUST fall on its own line &ndash;&gt;-->
    <!--<rule ref="Generic.Formatting.DisallowMultipleStatements"/>-->

    <!--&lt;!&ndash; Attempts to put multiple statements in alignment &ndash;&gt;-->
    <!--<rule ref="Generic.Formatting.MultipleStatementAlignment"/>-->

    <!--&lt;!&ndash; There MUST be ONE space after a cast &ndash;&gt;-->
    <!--<rule ref="Generic.Formatting.SpaceAfterCast"/>-->

    <!--&lt;!&ndash; Cyclomatic Complexity refers to the number of possible paths one could take through a function &ndash;&gt;-->
    <!--<rule ref="Generic.Metrics.CyclomaticComplexity"/>-->

    <!--&lt;!&ndash; Function names MUST use camelCaps naming &ndash;&gt;-->
    <!--<rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>-->

    <!--&lt;!&ndash; Constructors MUST be named __construct &ndash;&gt;-->
    <!--<rule ref="Generic.NamingConventions.ConstructorName"/>-->

    <!--&lt;!&ndash; Constants MUST be all upper case &ndash;&gt;-->
    <!--<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>-->

    <!--&lt;!&ndash; There MUST NOT be any characters before opening <?php &ndash;&gt;-->
    <!--<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>-->

    <!--&lt;!&ndash; Discourage deprecated functions &ndash;&gt;-->
    <!--<rule ref="Generic.PHP.DeprecatedFunctions"/>-->

    <!--&lt;!&ndash; Code MUST be properly indented and tabs MUST NOT be used for indentation &ndash;&gt;-->
    <!--<rule ref="Generic.Whitespace.ScopeIndent"/>-->

    <!--&lt;!&ndash; Squiz Sniffs &ndash;&gt;-->
    <!--<rule ref="Squiz.Arrays.ArrayBracketSpacing" />-->
    <!--<rule ref="Squiz.Arrays.ArrayDeclaration" />-->
    <!--<rule ref="Squiz.Commenting.ClosingDeclarationComment" />-->
    <!--<rule ref="Squiz.ControlStructures.ElseIfDeclaration" />-->
    <!--<rule ref="Squiz.Commenting.BlockComment" />-->
    <!--<rule ref="Squiz.Commenting.DocCommentAlignment" />-->
    <!--<rule ref="Squiz.Commenting.EmptyCatchComment" />-->
    <!--<rule ref="Squiz.Commenting.InlineComment" />-->
    <!--<rule ref="Squiz.Commenting.LongConditionClosingComment" />-->
    <!--<rule ref="Squiz.Commenting.PostStatementComment" />-->
    <!--<rule ref="Squiz.Formatting.OperatorBracket" />-->
    <!--<rule ref="Squiz.Operators.ComparisonOperatorUsage" />-->
    <!--<rule ref="Squiz.PHP.DisallowInlineIf" />-->
    <!--<rule ref="Squiz.Strings.ConcatenationSpacing" />-->
    <!--<rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />-->
    <!--<rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace" />-->
    <!--<rule ref="Squiz.WhiteSpace.FunctionSpacing" />-->
    <!--<rule ref="Squiz.WhiteSpace.OperatorSpacing" />-->
    <!--<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />-->

    <!--&lt;!&ndash; Have 12 chars padding maximum and always show as errors &ndash;&gt;-->
    <!--<rule ref="Generic.Formatting.MultipleStatementAlignment">-->
        <!--<properties>-->
            <!--<property name="maxPadding" value="12"/>-->
            <!--<property name="error" value="true"/>-->
        <!--</properties>-->
    <!--</rule>-->

</ruleset>
